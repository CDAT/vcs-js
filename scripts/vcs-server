#!/usr/bin/env python

"""
    This module is a VTK Web server application.
    The following command line illustrate how to use it::

        $ vtkpython .../server.py

    Any VTK Web executable script come with a set of standard arguments that
    can be overriden if need be::
        --host localhost
             Interface on which the HTTP server will listen on.

        --port 8080
             Port number on which the HTTP server will listen to.

        --content /path-to-web-content/
             Directory that you want to server as static web content.
             By default, this variable is empty which mean that we rely on another server
             to deliver the static content and the current process only focus on the
             WebSocket connectivity of clients.

        --authKey vtk-secret
             Secret key that should be provided by the client to allow it to make any
             WebSocket communication. The client will assume if none is given that the
             server expect "vtk-secret" as secret key.

        --data-dir /path/to/data
            Root directory to serve as data.
"""

import argparse

# import vtk modules.
import vtk
import tornado
import vcs_server
from vcs_server.Visualizer import Visualizer
from vcs_server.DataReader import DataReader
import pkg_resources
import tempfile
import os
import shutil


if __name__ == "__main__":
    # Create argument parser
    parser = argparse.ArgumentParser(description="Demo VCS application")

    # Add arguments
    parser.add_argument("--ssl", help="Whether to use SSL for communication or not.", default=False, action="store_true", dest="ssl")
    parser.add_argument("--host", help="Hostname to use", default="localhost", dest="host")
    parser.add_argument("--port", help="Port to use", default="8888", dest="port", type=int)

    # Exctract arguments
    args = parser.parse_args()

    # Create a temp directory for the server to host its translated JS out of
    js_dir = tempfile.mkdtemp()
    # Retrieve the JS contents to transform and cache in the tempdir
    js_file = pkg_resources.resource_string(vcs_server.__name__, "js/vcs.js")
    map_file = pkg_resources.resource_string(vcs_server.__name__, "js/vcs.js.map")

    replacements = {
        "@@@SECURE@@@": "s" if args.ssl else "",
        "@@@URL@@@": args.host + ":%d" % args.port
    }

    for r in replacements:
        js_file = js_file.replace(r, replacements[r])
        map_file = map_file.replace(r, replacements[r])

    with open(os.path.join(js_dir, "vcs.js"), "w") as jsfile:
        jsfile.write(js_file)
    with open(os.path.join(js_dir, "vcs.js.map"), "w") as mapfile:
        mapfile.write(map_file)

    # Start server
    application = tornado.web.Application([
        (r"/scripts/(.*)", tornado.web.StaticFileHandler, {"path": js_dir}),
        (r"/ws", Visualizer),
        (r"/data", DataReader),
    ], default_host=args.host)
    application.listen(args.port)
    tornado.ioloop.IOLoop.current().start()

    # Once we're done serving, clean up the cached JS
    shutil.rmtree(js_dir)
