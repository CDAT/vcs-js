#!/usr/bin/env python

"""
    This module is a VTK Web server application.
    The following command line illustrate how to use it::

        $ vtkpython .../server.py

    Any VTK Web executable script come with a set of standard arguments that
    can be overriden if need be::
        --host localhost
             Interface on which the HTTP server will listen on.

        --port 8080
             Port number on which the HTTP server will listen to.

        --content /path-to-web-content/
             Directory that you want to server as static web content.
             By default, this variable is empty which mean that we rely on another server
             to deliver the static content and the current process only focus on the
             WebSocket connectivity of clients.

        --authKey vtk-secret
             Secret key that should be provided by the client to allow it to make any
             WebSocket communication. The client will assume if none is given that the
             server expect "vtk-secret" as secret key.

        --data-dir /path/to/data
            Root directory to serve as data.
"""

import argparse

# import vtk modules.
import vtk
from vtk.web import protocols
from vtk.web import wslink as vtk_wslink
from wslink import server


# import protocols
import vcs_server
from vcs_server.Visualizer import Visualizer
import pkg_resources
import tempfile
import os
import shutil


class _VCSApp(vtk_wslink.ServerProtocol):

    # Application configuration
    authKey = "wslink-secret"

    def initialize(self):
        self.registerVtkWebProtocol(protocols.vtkWebMouseHandler())
        self.registerVtkWebProtocol(protocols.vtkWebViewPort())
        self.registerVtkWebProtocol(protocols.vtkWebViewPortImageDelivery())
        self.registerVtkWebProtocol(Visualizer())

        # Update authentication key to use
        self.updateSecret(_VCSApp.authKey)

        

if __name__ == "__main__":
    # Create argument parser
    parser = argparse.ArgumentParser(description="Demo VCS application")

    # Add default arguments
    server.add_arguments(parser)

    # Exctract arguments
    args = parser.parse_args()

    # Configure our current application
    _VCSApp.authKey = args.authKey
    # Create a temp directory for the server to host its translated JS out of
    args.content = tempfile.mkdtemp()
    # Retrieve the JS contents to transform and cache in the tempdir
    js_file = pkg_resources.resource_string(vcs_server.__name__, "js/vcs.js")
    with open(os.path.join(args.content, "vcs.js"), "w") as f:
        if args.sslKey and args.sslCert:
            # Use wss
            protocol = "wss://"
        else:
            protocol = "ws://"
        url = protocol + args.host + ":%d" % args.port
        f.write(js_file.replace("@@@URL@@@", url))
    # Start server
    server.start_webserver(options=args, protocol=_VCSApp)
    # Once we're done serving, clean up the cached JS
    shutil.rmtree(args.content)
